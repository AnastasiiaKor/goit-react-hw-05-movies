{"version":3,"file":"static/js/257.9d2465e2.chunk.js","mappings":"yRAGaA,EAAYC,EAAAA,EAAAA,IAAH,sIAQTC,EAASD,EAAAA,EAAAA,OAAH,yHAONE,EAAOF,EAAAA,EAAAA,GAAH,0GAQJG,GAAOH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,mJ,oMCvBJK,EAAUL,EAAAA,EAAAA,IAAH,wDAIPM,GAAaN,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,4LAUVO,EAAaP,EAAAA,EAAAA,GAAH,kI,SCgFvB,MA1FA,WACE,IAAQQ,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA0BE,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MAejB,IAbAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEuBC,EAAAA,EAAAA,IAAaV,GAFpC,OAEUW,EAFV,OAGIP,EAASO,GACTL,GAAY,GAJhB,gDAMIM,QAAQC,IAAR,MANJ,0DADc,uBAAC,WAAD,wBAUdC,EACD,GAAE,CAACd,IAEAK,EACF,OACE,2BACE,UAAC,KAAD,YACE,SAACP,EAAD,CAAYiB,GAAE,UAAKR,EAASS,MAAMC,MAAlC,6BACA,UAACpB,EAAD,YACE,gBACEqB,IAAK,kCAAoCf,EAAMgB,YAC/CC,IAAKjB,EAAMkB,SAGb,4BACE,0BACGlB,EAAMkB,MADT,KAEGlB,EAAMmB,cAAgBnB,EAAMmB,aAAaC,MAAM,EAAG,GAFrD,QAIA,yCAAsC,GAArBpB,EAAMqB,cAAmBC,UAA1C,QACA,qCACA,uBAAItB,EAAMuB,YACV,0BACE,qCACCvB,EAAMwB,OAAOC,OAAS,EACnBzB,EAAMwB,OACHJ,MAAM,EAAG,GACTM,KAAI,SAAAC,GAAK,OAAI,4BAAsBA,EAAMC,KAA5B,MAAWD,EAAM9B,GAArB,IACZG,EAAMwB,OAAOE,KAAI,SAAAC,GAAK,OACpB,4BAAsBA,EAAMC,KAA5B,MAAWD,EAAM9B,GADG,cAMhC,UAACD,EAAD,YACE,yBACE,SAACD,EAAD,CACEiB,GAAG,OACHC,MAAO,CACLC,KAAK,GAAD,OAAKV,EAASS,MAAMC,OAH5B,qBASF,yBACE,SAACnB,EAAD,CACEiB,GAAG,UACHC,MAAO,CACLC,KAAK,GAAD,OAAKV,EAASS,MAAMC,OAH5B,2BAUJ,SAAC,EAAAe,SAAD,CACEC,UACE,SAAC,KAAD,CACEC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,IAPf,UAWE,SAAC,KAAD,UAMX,C","sources":["components/SharedLayout/SharedLayout.styled.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 20px;\n  padding-right: 20px;\n`;\n\nexport const Header = styled.header`\n  background-color: #000000;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px 0px;\n`;\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  gap: 30px;\n`;\n\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n  color: #ffffff;\n  font-size: 30px;\n  font-weight: 500;\n\n  &.active {\n    color: red;\n  }\n`;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 20px;\n`;\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  padding: 5px 10px;\n  color: black;\n  border: 1px solid black;\n  margin-bottom: 20px;\n  margin-top: 10px;\n  display: inline-block;\n`;\n\nexport const StyledList = styled.ul`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: row;\n  list-style: none;\n  gap: 20px;\n`;\n","import { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { getMovieById } from 'services/api';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { Container } from '../../components/SharedLayout/SharedLayout.styled';\nimport { Wrapper, StyledLink, StyledList } from './MovieDetails.styled';\n\nfunction MovieDetails() {\n  const { id } = useParams();\n  const [movie, setMovie] = useState({});\n  const [isLoaded, setIsLoaded] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    async function getDetails() {\n      try {\n        const film = await getMovieById(id);\n        setMovie(film);\n        setIsLoaded(true);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getDetails();\n  }, [id]);\n\n  if (isLoaded) {\n    return (\n      <main>\n        <Container>\n          <StyledLink to={`${location.state.from}`}>&larr; Go back</StyledLink>\n          <Wrapper>\n            <img\n              src={'https://image.tmdb.org/t/p/w500' + movie.poster_path}\n              alt={movie.title}\n            />\n\n            <div>\n              <h1>\n                {movie.title} (\n                {movie.release_date && movie.release_date.slice(0, 4)})\n              </h1>\n              <p>User score: {(movie.vote_average * 10).toFixed()}%</p>\n              <b>Overview</b>\n              <p>{movie.overview}</p>\n              <p>\n                <b> Genres: </b>\n                {movie.genres.length > 3\n                  ? movie.genres\n                      .slice(0, 3)\n                      .map(genre => <span key={genre.id}>{genre.name} </span>)\n                  : movie.genres.map(genre => (\n                      <span key={genre.id}>{genre.name} </span>\n                    ))}\n              </p>\n            </div>\n          </Wrapper>\n          <StyledList>\n            <li>\n              <StyledLink\n                to=\"cast\"\n                state={{\n                  from: `${location.state.from}`,\n                }}\n              >\n                Cast\n              </StyledLink>\n            </li>\n            <li>\n              <StyledLink\n                to=\"reviews\"\n                state={{\n                  from: `${location.state.from}`,\n                }}\n              >\n                Reviews\n              </StyledLink>\n            </li>\n          </StyledList>\n          <Suspense\n            fallback={\n              <RotatingLines\n                strokeColor=\"grey\"\n                strokeWidth=\"5\"\n                animationDuration=\"0.75\"\n                width=\"96\"\n                visible={true}\n              />\n            }\n          >\n            <Outlet />\n          </Suspense>\n        </Container>\n      </main>\n    );\n  }\n}\nexport default MovieDetails;\n"],"names":["Container","styled","Header","List","Link","NavLink","Wrapper","StyledLink","StyledList","id","useParams","useState","movie","setMovie","isLoaded","setIsLoaded","location","useLocation","useEffect","getMovieById","film","console","log","getDetails","to","state","from","src","poster_path","alt","title","release_date","slice","vote_average","toFixed","overview","genres","length","map","genre","name","Suspense","fallback","strokeColor","strokeWidth","animationDuration","width","visible"],"sourceRoot":""}